// Structural Design Patterns 

***********************************************************************************************
Facade Pattern :
A facade simply acts as a point of entry in your sub system, does not introduce functionality to the sub system

a wrapper class to encapsulate the sub system, to hide its complexity

Removes the need for client classes to manage a subsystem on  their own, resulting in less coupling between
the subsystem and the client classes

Handles instantiation and redirection of tasks to the appropriate class within the sub system

provides a client class with a simplified interface for the sub system

Conditions required for you to use the facade desgin pattern:

You need a class to act as an interface between your sub system and a client class

You need to simplify the interaction with your sub system for client classes.

Key design principles used to implement the facade design pattern: 
Encapsulation, Information hiding, separation of concerns 

Adapter Pattern: 

 Adapter is a wrapper class : 
 The adapter encapsulates the adaptee and presents a new interface, or appearance, to the client class.
 It does this by wrapping the adaptee's interface and exposing a new target interface that makes sense 
 to the client
 
Wrap the adaptee and expose a target interface to the client.

Indirectly change the adaptee's interface into one that client is expecting by implementing a
target interface.

indirectly translate the client's request into one that the adaptee is expecting.

Reuse an existing adaptee with an incompatible interface.

***********************************************************************************************

Composite Pattern : 

To compose neested structure of Objects;
To deal with classes for these objects uniformly

In this design, a component interface serves as the supertyupe for a set of classes. Using polymorphism, 
all implementing classes conform to the same interface, which allows them to be dealt with uniformly

A composite class is present as well. This class is used to aggregate any class that implements the comonent
interface. the compositie class allows you to traverse through and potenially manipulate the component onjects 
that the composite object contains/

A leaf class represents a non composite type. 

Both of them implement a component interface, unifying them in a single type.

Composite object can contain another composite object since the comp class is a subtype of the component. 
This is known as recursive composition

In summary, a composite design pattern allows you to build a tree like structure of objects and to treat indivual
types of those objects uniformly. this is achieved by

Enforcing polymorphism across each class through implementing an interface(or inheriting from a superclass)

using a technique called as recursive composition that allows objects to be composed of other objects that 
are of a common type.

Composite design patterns apply the design principles of decomposition & generalization.

***********************************************************************************************

Proxy Pattern : allows a proxy class to represent a real "subject" class. acts as a lightwright version of the 
original object. can perform same tasks as an original object but may delegate requests to the original object to achieve 
them
three most common usecases for proxy pattern
To act as a virtual proxy : used in place of a resource intensive real subject class. commonly used on image in web pages
or graphic editors

To act a protection proxy :
when a proxy class is used to control access to the real subject class. for example, a system that is used by both students 
and instructors might limit access based on roles

To act as a remote proxy : 
when a proxy class is local, and the real subject exists remotely. Google docs


In summary, a proxy design patterns allows you to delay creating resource-intensive objects untill needed, control
access to specific object, or when you need something to as a local representation of a remote system

Main features:
To use the proxy class to wrap the real subject class
To have a polymorphic design so that the client class can expect the same interface for proxy and real subject

To use a lightweight proxy in place of a resource intensive object untill its needed

To implement verification to determine whether to send request to the real subject and to whom it should be sent

To represent a local representation of a system that is not in the same physical or virtual space

***********************************************************************************************

Decorator Pattern : 

changes to classes cannot be made at runtime, as the behaviour of an object is defined by its class, and only occurs at runtime
a new class would need to be created in order to achieve a new combination of behaviours while a program is running

A decorator pattern allows additional behaviors or responsibilities to be dynamically attached to an object, through
the use of aggregation to combine behaviors at run time

In summary, the main features of a decorate design pattern are

We can add, in effect, any number of behaviors dynamically to an object at runtime by using aggregation as 
a substitute for pure inheritance

Polymorphism is achieved by implementing a single interface

aggregation lets us create a stack of objects

Each decorator object in the stack is aggregated in a one to one relationship with the object below it in 
stack

By combining aggregation and polymorphism, we can recursively invoke the same behavior down the stack and have the 
behavior execute upwards from the concrete component object

